#!/usr/local/share/npm/bin/coffee

fs = require 'fs'
browserify = require 'browserify'
hamlc = require 'haml-coffee'
walk = require 'walk'
path = require 'path'
_ = require 'underscore'
coffee = require 'coffee-script'
browserifyTransform = require '../modules/browserify_transform'
mkdirp = require 'mkdirp'

REPORTER_TEMPLATE = "#{__dirname}/../test/reporter.hamlc"
REPORTER_OUTPUT = "#{__dirname}/../tmp/reporter.html"
BUNDLE_PATH = "#{__dirname}/../tmp/bundle.js"
SPEC_DIRECTORY = "#{__dirname}/../test"
SPEC_REGEX = /.+_spec\.(js|coffee)/
SUPPORT_FILES = [
  "../public/javascripts/jquery.js",
  "../public/javascripts/underscore.js",
  "../public/javascripts/backbone.js",
  "../test/support/mocha.js",
  "../test/support/chai.js",
  "../test/support/sinon.js"]

# ----------------------------- Spec Files ----------------------------------#
specFiles = []
specWalker = walk.walk(SPEC_DIRECTORY)

specWalker.on 'file', (root, file, next) ->
  filePath = path.normalize "#{root}/#{file.name}"
  SPEC_REGEX.test(filePath) and specFiles.push(filePath)
  next()

#-------------------------------- Spec Bundle -------------------------------#
specWalker.on 'end', ->
  specFiles = specFiles.map (specFile) ->
    compiledPath = "#{__dirname}/../tmp/spec/#{path.relative "#{__dirname}/../test", specFile}".replace(/\.coffee$/, ".js")
    mkdirp.sync path.dirname(compiledPath)
    fs.writeFileSync compiledPath, coffee.compile(fs.readFileSync(specFile).toString())
    path.normalize compiledPath
  # coffee.compile
  console.log specFiles
  compileCoffeescript()


#---------------------------- Compile Coffeescript ---------------------------#
compileCoffeescript = ->
  b = browserify()
  b.transform browserifyTransform
  # files.forEach (file) -> b.require file

  coffeeWalker = walk.walk("#{__dirname}/../client")
  coffeeWalker.on 'file', (root, file, next) ->
    filePath = path.normalize "#{root}/#{file.name}"
    expose = path.relative("#{__dirname}/../client", filePath).replace(/\.coffee$/, '')
    b.require filePath, {expose}
    next()
  coffeeWalker.on 'end', ->
    output = fs.createWriteStream BUNDLE_PATH
    b.bundle().pipe output
    renderReporterTemplate()

# Re-compile maximum once in 300 ms.
debouncedCompile = _.debounce(compileCoffeescript, 300)

# ---------------------------------- Watch files ------------------------------#

fs.watch "#{__dirname}/../client", (event, filename) ->
  debouncedCompile()

#----------------------------- Reporter Template -----------------------------#

renderReporterTemplate = ->
  reporterTemplate = fs.readFileSync(REPORTER_TEMPLATE).toString()
  fs.writeFileSync REPORTER_OUTPUT, hamlc.compile(reporterTemplate)
    specFiles: specFiles
    bundlePath: BUNDLE_PATH
    supportPaths: SUPPORT_FILES
  process.stdout.write "[32mrendered reporter template\n"
